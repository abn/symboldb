* Write some documentation, including a manual page.

* Check portability of the sources to non-Fedora systems.

* Better logging, in particular of network activity.  Final URLs after
  redirection should be included in error messages.

* Better XML error handling.  On an Expat error, report the XML
  fragment immediately before and after the error (which should still
  be available in the input buffer).  Consider exporting position
  information in expat_source, and a stack of open tags.  (Hopefully,
  this will not cause too much of a slowdown.)

* Parallelize downloading.

* Store sizes of files inside RPMs.  Handle symbolic links and
  possibly hard links.

* Support extracting Java symbols (class, method, field definitions
  and references).

* Support for extracting Python symbols.  This probably needs a some
  flow analysis to give good results.

* Parallelize RPM parsing and database loading.  It is not entirely
  clear if this is beneficial on small systems, but it will probably
  help if symboldb ever runs on real server systems.

* Support unattended operation.  The package set <-> compose URL
  mapping should probably reside in the database, and a single command
  (which can be run from cron) could use that to update all package
  sets.  This also relies on better logging/diagnostics and improved
  error recovery.

* More test cases, including loading of sample RPMs.

* Follow the cryptographic chain starting with the repomd.xml file and
  verify all hashes up to the RPM files along the way.

* Accelerate downloads of re-signed RPMs by combining the new header
  with the existing compressed cpio data.

* Add some convenience wrapper for PostgreSQL parameterized queries
  and parsing query results.  (This reaches into the territory of
  template metaprogramming, so beware.)

* Use the libpq binary interface for bulk data transfers.  This should
  lead to a measurable speedup when transferring mostly integer
  columns (e.g., when computing the ELF closure).
